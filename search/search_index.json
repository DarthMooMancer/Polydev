{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>A multi-language project managing plugin for file creation, building, and running code\u2014all within neovim. Whether you're coding in Java, Python, Lua, Rust, or more, Polydev provides seamless integration to boost your productivity inside Neovim.</p> <p> </p> <p> </p>"},{"location":"#why-polydev","title":"Why Polydev?","text":"<p>Working across multiple languages often means repetitive setup and constant context switching. Polydev eliminates this friction by offering:</p> <ul> <li>Project templates per language</li> <li>Custom keybindings for essential actions</li> <li>Floating terminal integration</li> <li>Automated file and folder generation</li> <li>A plugin-first design for easy extensibility</li> </ul>"},{"location":"#core-features","title":"Core Features","text":"<ul> <li> <p>Language Profiles   Define settings per language including <code>project_root</code>, keymaps, and build commands.</p> </li> <li> <p>Floating Terminals   Run build, and run commands in a clean, isolated terminal window inside Neovim.</p> </li> <li> <p>Scaffolding   Quickly generate boilerplate and structured directories for new projects.</p> </li> <li> <p>Custom Keybinds   Map actions like <code>Run</code>, <code>PipInstall</code>, <code>Open Manager</code>, <code>etc</code> to your preferred keys.</p> </li> <li> <p>Pluggable Design   Easily extend functionality with custom language presets and commands.</p> </li> </ul>"},{"location":"#who-its-for","title":"Who It's For","text":"<ul> <li>Developers who work in multiple languages</li> <li>Neovim plugin authors or power users</li> <li>Anyone who wants a faster, more unified project workflow</li> </ul>"},{"location":"#design-goals","title":"Design Goals","text":"<ul> <li> <p>Consistency   Offer a predictable workflow across languages and tools.</p> </li> <li> <p>Extensibility   Support custom configurations, commands, and language integrations.</p> </li> <li> <p>Simplicity   Reduce boilerplate, context switching, and friction.</p> </li> </ul>"},{"location":"#real-world-example","title":"Real-World Example","text":"<p>If you switch often between Rust, Lua, and Python:</p> <ol> <li>Polydev sets up your project layout automatically.</li> <li>Creates boilerplate like <code>main.rs</code>, <code>init.lua</code>, or <code>main.py</code>.</li> <li>Maps commands to keys (e.g. <code>&lt;leader&gt;pr</code> to run, <code>&lt;leader&gt;po</code> to open the manager).</li> <li>Opens a floating terminal with build or run output \u2014 no extra configuration required.</li> </ol>"},{"location":"appearance/","title":"Appearance","text":"Group Default Description <code>PolydevNormal</code> <code>NormalFloat</code> Base background of window <code>PolydevBorder</code> <code>Function</code> Border of window <code>PolydevTitle</code> <code>FloatTitle</code> Title of each popup"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#lazynvim","title":"Lazy.nvim","text":"<pre><code>return {\n    \"DarthMooMancer/Polydev\",\n    dependencies = {\n        \"MunifTanjim/nui.nvim\"\n    },\n    opts = {}, -- Setup is later on\n}\n</code></pre>"},{"location":"installation/#minideps","title":"Mini.deps","text":"<pre><code>MiniDeps.add({\n    source = \"DarthMooMancer/Polydev\"\n    depends = {\n        \"MunifTanjim/nui.nvim\"\n    }\n})\n\nrequire(\"Polydev\").setup({})\n</code></pre>"},{"location":"installation/#packernvim","title":"Packer.nvim","text":"<pre><code>use({\n    \"DarthMooMancer/Polydev\",\n    requires = {\n        \"MunifTanjim/nui.nvim\"\n    },\n})\n\nrequire(\"Polydev\").setup({})\n</code></pre>"},{"location":"languages/","title":"Language Reference","text":""},{"location":"languages/#java","title":"Java","text":""},{"location":"languages/#structure-reference","title":"Structure Reference","text":"Directory/File Path Description <code>src/</code> Contains the source code files, including <code>Main.java</code> <code>build/</code> Contains compiled <code>.class</code> files <code>Main.java</code> The main entry point of your Java project <code>.gitingore</code> Ignores files for things like Telescope and pushing to github"},{"location":"languages/#project-layout","title":"Project Layout","text":"<pre><code>Projects/\n\u2514\u2500\u2500 Java/\n    \u2514\u2500\u2500 Project_Name/\n        \u251c\u2500\u2500 src/\n        \u2502   \u2514\u2500\u2500 Main.java\n        \u251c\u2500\u2500 build/\n        \u2502   \u2514\u2500\u2500 *.class\n        \u2514\u2500\u2500 .gitingore\n</code></pre>"},{"location":"languages/#c","title":"C","text":""},{"location":"languages/#structure-reference_1","title":"Structure Reference","text":"Directory/File Path Description <code>CMakeLists.txt</code> Configuration file for your project build <code>src/</code> Folder containing source files for the project <code>main.c</code> Main C file for the project <code>*.c</code> Additional C source files <code>build/</code> Folder where the build artifacts will be generated <code>include/</code> Folder for header files <code>*.h</code> C header files <code>.gitingore</code> Ignores files for things like Telescope and pushing to github"},{"location":"languages/#project-layout_1","title":"Project Layout","text":"<pre><code>Projects/\n\u2514\u2500\u2500 C/\n    \u2514\u2500\u2500 Project_Name/\n        \u251c\u2500\u2500 CMakeLists.txt\n        \u251c\u2500\u2500 src/\n        \u2502   \u251c\u2500\u2500 main.c\n        \u2502   \u2514\u2500\u2500 *.c\n        \u251c\u2500\u2500 .gitingore\n        \u251c\u2500\u2500 build/\n        \u2502   \u2514\u2500\u2500 &lt;CMAKE_FILES&gt;\n        \u2502   \u2514\u2500\u2500 &lt;main-executable&gt;\n        \u2514\u2500\u2500 include/\n            \u2514\u2500\u2500 *.h\n</code></pre>"},{"location":"languages/#c_1","title":"C++","text":""},{"location":"languages/#structure-reference_2","title":"Structure Reference","text":"Directory/File Path Description <code>CMakeLists.txt</code> Configuration file for your project build <code>src/</code> Folder containing source files for the project <code>main.cpp</code> Main Cpp file for the project <code>*.cpp</code> Additional Cpp source files <code>build/</code> Folder where the build artifacts will be generated <code>include/</code> Folder for header files <code>*.hpp</code> Cpp header files <code>.gitingore</code> Ignores files for things like Telescope and pushing to github"},{"location":"languages/#project-layout_2","title":"Project Layout","text":"<pre><code>Projects/\n\u2514\u2500\u2500 Cpp/\n    \u2514\u2500\u2500 Project_Name/\n        \u251c\u2500\u2500 CMakeLists.txt\n        \u251c\u2500\u2500 .gitingore\n        \u251c\u2500\u2500 src/\n        \u2502   \u251c\u2500\u2500 main.cpp\n        \u2502   \u2514\u2500\u2500 *.cpp\n        \u251c\u2500\u2500 build/\n        \u2502   \u2514\u2500\u2500 &lt;CMAKE_FILES&gt;\n        \u2502   \u2514\u2500\u2500 &lt;main-executable&gt;\n        \u2514\u2500\u2500 include/\n            \u2514\u2500\u2500 *.hpp\n</code></pre>"},{"location":"languages/#lua","title":"Lua","text":""},{"location":"languages/#structure-reference_3","title":"Structure Reference","text":"Directory/File Path Description <code>lua/&lt;Project_name&gt;</code> Directory containing the main Lua project files <code>lua/&lt;Project_name&gt;/init.lua</code> The main entry point for your Lua project <code>.gitingore</code> Ignores files for things like Telescope and pushing to github"},{"location":"languages/#project-layout_3","title":"Project Layout","text":"<pre><code>Projects/\n\u2514\u2500\u2500 Lua/\n    \u2514\u2500\u2500 Project_Name/\n        \u251c\u2500\u2500 .gitingore\n        \u2514\u2500\u2500 lua/\n            \u2514\u2500\u2500 Project_name/\n                \u2514\u2500\u2500 init.lua         -- Main Lua file\n</code></pre>"},{"location":"languages/#python","title":"Python","text":"<ul> <li> <p>Automatic Virtual Environment Creation: Each Python project automatically sets up and uses a new virtual environment. You don\u2019t need to worry about environment management. Just install your dependencies with <code>pip</code> as needed.</p> </li> <li> <p>Dependency Management with Pip: Need to install Python modules? Simply type the name of the module in the terminal, and Polydev will take care of the installation using <code>pip</code>. You can even update <code>pip</code> if required, ensuring smooth installation.</p> </li> </ul>"},{"location":"languages/#structure-reference_4","title":"Structure Reference","text":"Directory/File Path Description <code>requirements.txt</code> File for listing project dependencies <code>setup.py</code> Python project setup file <code>tests/</code> Folder containing test files <code>venv/</code> Virtual environment folder <code>main.py</code> Main Python file for your project <code>.gitingore</code> Ignores files for things like Telescope and pushing to github"},{"location":"languages/#project-layout_4","title":"Project Layout","text":"<pre><code>Projects/\n\u2514\u2500\u2500 Python/\n    \u2514\u2500\u2500 Project_Name/\n        \u251c\u2500\u2500 .gitingore\n        \u251c\u2500\u2500 main.py\n        \u251c\u2500\u2500 requirements.txt\n        \u251c\u2500\u2500 setup.py\n        \u251c\u2500\u2500 tests/\n        \u2514\u2500\u2500 venv/\n</code></pre>"},{"location":"languages/#html","title":"Html","text":"<p>Nothing here yet! Html is supported however! Will do later</p>"},{"location":"languages/#rust","title":"Rust","text":"<p>Nothing here yet! Rust is supported however! Will do later</p>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#project-manager","title":"Project Manager","text":"<p>Note: The project manager closely follows the netrw keybinds and allows for project management all in one spot</p> Binding Description ENTER <code>Open file / Enter directory</code> DELETE <code>Go to parent directory</code> / <code>Filter (fuzzy search)</code> a <code>Create new folder</code> % <code>Create new file</code> x <code>Create new auxilary file (ex. headers)</code> d <code>Create new project</code> R <code>Rename file/folder</code> D <code>Delete file/folder</code> ESC <code>Quit popup</code> <p>WARNING: Do not copy the defaults. Only change what you need for your workflow!</p>"},{"location":"setup/#project-root","title":"Project Root","text":"<pre><code>-- Automatically creates a project root if not already made.\n-- Stores all projects in this root\n\n-- Global --\nglobals = {\n    project_root = \"~/Projects\"\n}\n\n-- Lua --\nlua = {\n    project_root = \"~/{global_root}/Lua\"\n}\n\n-- Html --\nhtml = {\n    project_root = \"~/{global_root}/Html\"\n}\n\n-- Rust --\nrust = {\n    project_root = \"~/{global_root}/Rust\"\n}\n\n-- Java --\njava = {\n    project_root = \"~/{global_root}/Java\"\n}\n\n-- Python --\npython = {\n    project_root = \"~/{global_root}/Python\"\n}\n\n-- C --\nc = {\n    project_root = \"~/{global_root}/C\"\n}\n\n-- C++ --\ncpp = {\n    project_root = \"~/{global_root}/CPP\"\n}\n</code></pre>"},{"location":"setup/#keybinds","title":"Keybinds","text":"<pre><code>-- globals --\nglobals = {\n    keybinds = {\n        [\"&lt;leader&gt;po\"] = \"PolydevManager\",\n    }\n}\n\n-- rust --\nrust = {\n    keybinds = {\n        [\"&lt;leader&gt;pr\"] = \"RustRun\",\n    }\n}\n\n-- java --\njava = {\n    keybinds = {\n        [\"&lt;leader&gt;pr\"] = \"JavaRun\",\n    }\n}\n\n-- python --\npython = {\n    keybinds = {\n        [\"&lt;leader&gt;pr\"] = \"PythonRun\",\n        [\"&lt;leader&gt;pb\"] = \"PythonPip\",\n    }\n}\n\n-- lua --\nlua = {\n    keybinds = {\n        [\"&lt;leader&gt;pr\"] = \"LuaRun\",\n    }\n}\n\n-- c --\nc = {\n    keybinds = {\n        [\"&lt;leader&gt;pr\"] = \"CRun\",\n    }\n}\n\n-- cpp --\ncpp = {\n    keybinds = {\n        [\"&lt;leader&gt;pr\"] = \"CppRun\",\n    }\n}\n</code></pre>"},{"location":"setup/#terminal-configuration","title":"Terminal Configuration","text":"<pre><code>terminal = {\n    -- floating or split\n    mode = \"split\",\n    win = {\n        -- type: \"vertical\" or \"horizonal\" -- Only for split windows\n        -- anchor: \"bottom\" or \"right\" or \"center\" or \"corner\"\n            -- \"bottom\" and \"right\" are only split anchors\n            -- \"center\" and \"corner\" are only floating anchors\n        type = \"vertical\", anchor = \"right\"\n    },\n    border = {\n        enabled = true,\n        -- type: border decoration, follows `winborder`\n            -- \"bold\": Bold line box.\n            -- \"double\": Double-line box.\n            -- \"none\": No border.\n            -- \"rounded\": Like \"single\", but with rounded corners (\"\u256d\" etc.).\n            -- \"shadow\": Drop shadow effect, by blending with the background.\n            -- \"single\": Single-line box.\n            -- \"solid\": Adds padding by a single whitespace cell.\n        type = \"rounded\"\n    }\n}\n</code></pre>"}]}